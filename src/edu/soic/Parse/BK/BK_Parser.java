/* Generated By:JavaCC: Do not edit this line. BK_Parser.java */
package edu.soic.Parse.BK;

import edu.soic.Learning.Boosting.LearningProblem;
import java.util.ArrayList;
import edu.soic.FOL.Predicate;

public class BK_Parser implements BK_ParserConstants {
        LearningProblem lp = new LearningProblem();

  final public void BKFile() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPTION:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      option();
    }
    label_2:
    while (true) {
      predDef();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      mode();
    }
    jj_consume_token(0);
  }

//-------OPTIONS
  final public void option() throws ParseException {
        Token opt;
        Token value;
    jj_consume_token(OPTION);
    jj_consume_token(10);
    opt = jj_consume_token(ID);
    jj_consume_token(11);
    jj_consume_token(12);
    value = jj_consume_token(INT);
    jj_consume_token(13);
                if(opt.image.equals("M"))
                {
                        lp.setGradientSteps(Integer.parseInt(value.image));
                }
                else if(opt.image.equals("CM"))
                {
                        lp.setClausesPerGS(Integer.parseInt(value.image));
                }
                else if(opt.image.equals("N"))
                {
                        lp.setMaxClauseLen(Integer.parseInt(value.image));
                }
                else if(opt.image.equals("MC"))
                {
                        lp.setMaxExp(Integer.parseInt(value.image));
                }
                else
                {
                        lp.setBeamLength(Integer.parseInt(value.image));
                }
  }

  final public void predDef() throws ParseException {
        Token tp;
        Token tt;
        ArrayList<String> types = new ArrayList<String>();
        boolean isQuery = false;
    jj_consume_token(14);
    tp = jj_consume_token(ID);
    jj_consume_token(10);
    tt = jj_consume_token(ID);
                                            types.add(tt.image);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      jj_consume_token(15);
      tt = jj_consume_token(ID);
                                types.add(tt.image);
    }
    jj_consume_token(11);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      jj_consume_token(16);
                                                                 isQuery = true;
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(13);
                Predicate p = new Predicate(tp.image, types.size());
                System.out.println(p.toString());
                for(int i = 0; i < types.size(); ++i)
                {
                        p.setType(i, types.get(i));
                }
                lp.addPredicate(tp.image, p, isQuery);
  }

  final public void mode() throws ParseException {
        Token tmode;
        Token tp;
        Predicate p;
        String[] modes;
        int i = 0;
    jj_consume_token(17);
    tp = jj_consume_token(ID);
         p = lp.getPred(tp.image);modes = new String[p.getArity()];
    jj_consume_token(10);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      tmode = jj_consume_token(18);
      break;
    case 19:
      tmode = jj_consume_token(19);
      break;
    case 20:
      tmode = jj_consume_token(20);
      break;
    case 21:
      tmode = jj_consume_token(21);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         modes[i++] = tmode.image;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      jj_consume_token(15);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        tmode = jj_consume_token(18);
        break;
      case 19:
        tmode = jj_consume_token(19);
        break;
      case 20:
        tmode = jj_consume_token(20);
        break;
      case 21:
        tmode = jj_consume_token(21);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
         modes[i++] = tmode.image;
    }
    jj_consume_token(11);
    jj_consume_token(13);
                p.addMode(modes);
  }

  final public LearningProblem getLP() throws ParseException {
         {if (true) return lp;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public BK_ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x4000,0x20000,0x8000,0x10000,0x3c0000,0x8000,0x3c0000,};
   }

  /** Constructor with InputStream. */
  public BK_Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BK_Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BK_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BK_Parser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new BK_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BK_Parser(BK_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BK_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
